{"version":3,"sources":["Profile.js","Header.js","AddPostForm.js","AddCommentForm.js","Comment.js","Post.js","Feed.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Profile","props","name","Header","className","AddPostForm","AddCommentForm","Comment","Post","useState","count","setCount","dropdownItems","key","color","label","placement","onClick","author","subject","Feed","posts","map","item","Footer","App","setPosts","useEffect","fetch","baseURL","method","headers","then","e","json","highlightColor","variant","data","copy","concat","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oRAEe,SAASA,EAAQC,GAC9B,OAAO,uCAAaA,EAAMC,KAAnB,c,oBCCM,SAASC,EAAOF,GAC7B,OACE,4BAAQG,UAAU,cAChB,kDAAwBH,EAAMC,MAAQ,kBAAC,IAAD,OACtC,kBAACF,EAAD,CAASE,KAAMD,EAAMC,QCNZ,SAASG,IACtB,OAAO,yDCDM,SAASC,IACtB,OAAO,2DCDM,SAASC,IACtB,OAAO,gD,qCCGM,SAASC,EAAKP,GAAO,MAKRQ,mBAAS,GALD,mBAK3BC,EAL2B,KAKpBC,EALoB,KAU9BC,EAAgB,CAClB,kBAAC,IAAD,CAAcC,IAAI,KAAlB,YACA,kBAAC,IAAD,CAAcA,IAAI,KAAlB,aAGF,OACE,yBAAKT,UAAU,QACb,gDACA,6BACE,kBAAC,IAAD,CAAUU,MAAM,SAASC,MAAM,YAAYC,UAAU,SAClDJ,IAGL,4BAAQK,QAhBQ,WAClBN,EAASD,EAAQ,KAef,SACA,yDACA,2BAAIT,EAAMiB,QACV,2BAAIjB,EAAMkB,SACV,kBAACb,EAAD,MACA,kBAACC,EAAD,MACA,kBAACA,EAAD,OC/BS,SAASa,EAAKnB,GAC3B,OACE,yBAAKG,UAAU,QACb,gDACA,kBAACC,EAAD,MACCJ,EAAMoB,MAAMC,KAAI,SAAAC,GACf,OAAO,kBAACf,EAAD,CAAMU,OAAQK,EAAKL,OAAQC,QAASI,EAAKJ,cCRzC,SAASK,IACtB,OACE,yBAAKpB,UAAU,UACb,iD,oBCqDSqB,MAhDf,WAAe,MASahB,mBAAS,IATtB,mBASNY,EATM,KASCK,EATD,KA6Bb,OAnBAC,qBAAU,WAORC,MAAMC,2EAAsC,CAC1CC,OAAQ,MACRC,QAPc,CACd,eAAgB,kCAChB,WAAY,2BACZ,gBAAiB,cAMhBC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,MAAK,SAAAC,GAAC,OAAIP,EAASO,QACrB,IAOD,yBAAK7B,UAAU,OACb,kBAAC,gBAAD,CAAe+B,eAAe,QAC5B,2BACE,kBAAC,IAAD,CAAUzB,MAAO,MAIrB,kBAACP,EAAD,CAAQD,KAAK,QACb,kBAAC,IAAD,CAAQkC,QAAQ,SAAStB,MAAM,SAASG,QAb5C,SAAiBoB,GACf,IAAMC,EAAOjB,EAAMkB,OAAOF,GAC1BX,EAASY,KAWP,YAGA,kBAAClB,EAAD,CAAMC,MAAOA,IAEb,kBAACG,EAAD,QCzCcgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,kB","file":"static/js/main.a510894a.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Profile(props) {\n  return <h2>This is {props.name}'s profile</h2>;\n}\n","import React from \"react\";\nimport Profile from \"./Profile.js\";\nimport Skeleton, { SkeletonTheme } from \"react-loading-skeleton\";\n\nexport default function Header(props) {\n  return (\n    <header className=\"App-header\">\n      <h1>This is the header {props.name || <Skeleton />}</h1>\n      <Profile name={props.name} />\n    </header>\n  );\n}\n","import React from \"react\";\n\nexport default function AddPostForm() {\n  return <h1>This is the add post form</h1>;\n}\n","import React from \"react\";\n\nexport default function AddCommentForm() {\n  return <h3>This is an add comment form</h3>;\n}\n","import React from \"react\";\n\nexport default function Comment() {\n  return <p>This is a comment</p>;\n}\n","import React, { useState } from \"react\";\nimport AddCommentForm from \"./AddCommentForm.js\";\nimport Comment from \"./Comment.js\";\nimport Dropdown from \"muicss/lib/react/dropdown\";\nimport DropdownItem from \"muicss/lib/react/dropdown-item\";\n\nexport default function Post(props) {\n  //   const stateStuff = useState(0);\n  //   const count = stateStuff[0];\n  //   const setCount = stateStuff[1];\n  //it's the same as:\n  const [count, setCount] = useState(0);\n\n  const updateCount = () => {\n    setCount(count + 1);\n  };\n  let dropdownItems = [\n    <DropdownItem key=\"1\">Option 1</DropdownItem>,\n    <DropdownItem key=\"2\">Option 2</DropdownItem>\n  ];\n\n  return (\n    <div className=\"post\">\n      <h1>This is the post</h1>\n      <div>\n        <Dropdown color=\"danger\" label=\"Dropright\" placement=\"right\">\n          {dropdownItems}\n        </Dropdown>\n      </div>\n      <button onClick={updateCount}>click</button>\n      <p>You clicked so many times!</p>\n      <p>{props.author}</p>\n      <p>{props.subject}</p>\n      <AddCommentForm />\n      <Comment />\n      <Comment />\n    </div>\n  );\n}\n","import React from \"react\";\nimport AddPostForm from \"./AddPostForm.js\";\nimport Post from \"./Post.js\";\n\nexport default function Feed(props) {\n  return (\n    <div className=\"feed\">\n      <h1>This is the feed</h1>\n      <AddPostForm />\n      {props.posts.map(item => {\n        return <Post author={item.author} subject={item.subject} />;\n      })}\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function Footer() {\n  return (\n    <div className=\"footer\">\n      <h3>This is a footer</h3>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport \"./profile.css\";\nimport \"./App.css\";\nimport Header from \"./Header.js\";\nimport Feed from \"./Feed.js\";\nimport Footer from \"./Footer.js\";\n\nimport Button from \"muicss/lib/react/button\";\nimport Skeleton, { SkeletonTheme } from \"react-loading-skeleton\";\n\nfunction App() {\n  // const user = \"Iga Marianna\"; //pass to Profile\n  // const [posts, setPosts] = useState([\n  //   {\n  //     author: \"Iga\",\n  //     subject: \"cats\"\n  //   }\n  // ]); //pass to Feed\n\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    const baseURL = \"https://bandsdatabase-76bc.restdb.io/rest/posts/\";\n    const headers = {\n      \"Content-Type\": \"application/json; charset=utf-8\",\n      \"x-apikey\": \"5d887ce8fd86cb75861e2623\",\n      \"cache-control\": \"no-cache\"\n    };\n    fetch(baseURL + \"posts?fetchchildren=true\", {\n      method: \"get\",\n      headers: headers\n    })\n      .then(e => e.json())\n      .then(e => setPosts(e));\n  }, []);\n\n  function addPost(data) {\n    const copy = posts.concat(data);\n    setPosts(copy);\n  }\n  return (\n    <div className=\"App\">\n      <SkeletonTheme highlightColor=\"#fff\">\n        <p>\n          <Skeleton count={3} />\n        </p>\n      </SkeletonTheme>\n\n      <Header name=\"Iga\" />\n      <Button variant=\"raised\" color=\"danger\" onClick={addPost}>\n        Add post\n      </Button>\n      <Feed posts={posts} />\n      {/* {posts.length && .... skeleton} */}\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}